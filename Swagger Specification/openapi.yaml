openapi: 3.0.3
info:
  title: E-commerce API- OpenAPI 3.0
  version: 1.0.11
  description: '  API for managing operation of an e-commerce system, including order     creation, cart management, product handling, and checkout'
paths:
  /register:
    post:
      summary: Register a new user
      description: Allows a new user to register with a username, password, and email.
      operationId: registerUser
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "john_doe"
                password:
                  type: string
                  example: "password123"
                email:
                  type: string
                  example: "john.doe@example.com"
      responses:
        200:
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User successfully registered"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid input data"

  /login:
    post:
      summary: Login an existing user
      description: Authenticates a user and returns a JWT token for future requests.
      operationId: loginUser
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "john_doe"
                password:
                  type: string
                  example: "password123"
      responses:
        200:
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMjM0NTY3ODkwLCJpYXQiOjE1MTYyMzkwMjJ9.Y0d3gWqJU7phlvYlIysl60lLKHM6R1Y0Y2XYXg"
        401:
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid username or password"

  /logout:
    post:
      summary: Logout the current user
      description: Invalidates the current session or JWT token, effectively logging the user out.
      operationId: logoutUser
      tags:
        - Authentication
      responses:
        200:
          description: User successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User successfully logged out"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid session or token"

  /products:
    get:
      summary: Retrieve all products
      description: Retrieve a list of all products available in the store.
      operationId: getProducts
      tags:
        - Products
      responses:
        200:
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    product_id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: "Laptop"
                    price:
                      type: number
                      format: float
                      example: 999.99
                    stock:
                      type: integer
                      example: 10
        404:
          description: No products found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No products found"

    post:
      summary: Create a new product
      description: Add a new product to the inventory.
      operationId: createProduct
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Smartphone"
                price:
                  type: number
                  format: float
                  example: 499.99
                stock:
                  type: integer
                  example: 50
      responses:
        201:
          description: Product successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product successfully created"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid input data"

  /products/{id}:
    get:
      summary: Get product by ID
      description: Retrieve details of a specific product by its ID.
      operationId: getProductById
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the product to retrieve.
      responses:
        200:
          description: Product details
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: "Laptop"
                  price:
                    type: number
                    format: float
                    example: 999.99
                  stock:
                    type: integer
                    example: 10
        404:
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found"

    put:
      summary: Update product by ID
      description: Update details of a specific product by its ID.
      operationId: updateProductById
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the product to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Laptop Pro"
                price:
                  type: number
                  format: float
                  example: 1099.99
                stock:
                  type: integer
                  example: 5
      responses:
        200:
          description: Product successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product successfully updated"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid input data"

    delete:
      summary: Delete product by ID
      description: Remove a specific product from the inventory.
      operationId: deleteProductById
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the product to delete.
      responses:
        200:
          description: Product successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product successfully deleted"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found"
        
  paths:
  /customers:
    get:
      summary: Get all customers
      description: Retrieve a list of all customers in the system.
      operationId: getAllCustomers
      tags:
        - Customers
      responses:
        200:
          description: List of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    customer_id:
                      type: integer
                      example: 1
                    first_name:
                      type: string
                      example: "John"
                    last_name:
                      type: string
                      example: "Doe"
                    email:
                      type: string
                      example: "john.doe@example.com"
        404:
          description: No customers found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No customers found"

    post:
      summary: Create a new customer
      description: Add a new customer to the system.
      operationId: createCustomer
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: "John"
                last_name:
                  type: string
                  example: "Doe"
                email:
                  type: string
                  example: "john.doe@example.com"
                phone:
                  type: string
                  example: "123-456-7890"
                shipping_address:
                  type: string
                  example: "123 Main St, Springfield, IL"
      responses:
        201:
          description: Customer successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Customer successfully created"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid input data"

  /customers/{id}:
    get:
      summary: Get customer by ID
      description: Retrieve details of a specific customer by their ID.
      operationId: getCustomerById
      tags:
        - Customers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the customer to retrieve.
      responses:
        200:
          description: Customer details
          content:
            application/json:
              schema:
                type: object
                properties:
                  customer_id:
                    type: integer
                    example: 1
                  first_name:
                    type: string
                    example: "John"
                  last_name:
                    type: string
                    example: "Doe"
                  email:
                    type: string
                    example: "john.doe@example.com"
        404:
          description: Customer not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Customer not found"

    put:
      summary: Update customer by ID
      description: Update details of a specific customer by their ID.
      operationId: updateCustomerById
      tags:
        - Customers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the customer to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: "John"
                last_name:
                  type: string
                  example: "Doe"
                email:
                  type: string
                  example: "john.doe@example.com"
                phone:
                  type: string
                  example: "123-456-7890"
                shipping_address:
                  type: string
                  example: "123 Main St, Springfield, IL"
      responses:
        200:
          description: Customer successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Customer successfully updated"
        404:
          description: Customer not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Customer not found"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid input data"

    delete:
      summary: Delete customer by ID
      description: Remove a specific customer from the system.
      operationId: deleteCustomerById
      tags:
        - Customers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the customer to delete.
      responses:
        200:
          description: Customer successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Customer successfully deleted"
        404:
          description: Customer not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Customer not found"

  /orders:
    get:
      summary: Get all orders
      description: Retrieve a list of all orders in the system.
      operationId: getAllOrders
      tags:
        - Orders
      responses:
        200:
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    order_id:
                      type: integer
                      example: 1
                    customer_id:
                      type: integer
                      example: 1
                    order_timestamp:
                      type: string
                      example: "2024-11-10T12:00:00Z"
                    order_status:
                      type: string
                      example: "completed"
        404:
          description: No orders found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No orders found"

    post:
      summary: Create a new order
      description: Add a new order to the system.
      operationId: createOrder
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customer_id:
                  type: integer
                  example: 1
                order_status:
                  type: string
                  example: "pending"
                shipping_address:
                  type: string
                  example: "123 Main St, Springfield, IL"
      responses:
        201:
          description: Order successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order successfully created"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid input data"

  /orders/{id}:
    get:
      summary: Get order by ID
      description: Retrieve details of a specific order by its ID.
      operationId: getOrderById
      tags:
        - Orders
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the order to retrieve.
      responses:
        200:
          description: Order details
          content:
            application/json:
              schema:
                type: object
                properties:
                  order_id:
                    type: integer
                    example: 1
                  customer_id:
                    type: integer
                    example: 1
                  order_timestamp:
                    type: string
                    example: "2024-11-10T12:00:00Z"
                  order_status:
                    type: string
                    example: "completed"
        404:
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order not found"

    put:
      summary: Update order by ID
      description: Update details of a specific order by its ID.
      operationId: updateOrderById
      tags:
        - Orders
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the order to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order_status:
                  type: string
                  example: "shipped"
                shipping_address:
                  type: string
                  example: "456 Elm St, Springfield, IL"
      responses:
        200:
          description: Order successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order successfully updated"
        404:
          description: Order not found
          content:
            application/json:

              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order not found"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid input data"

  /orders/{id}/checkout:
    post:
      summary: Checkout an order
      description: Process the checkout for a specific order, validate the cart, and simulate the payment process.
      operationId: checkoutOrder
      tags:
        - Orders
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the order to checkout.
      responses:
        200:
          description: Checkout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Checkout successful"
                  order:
                    type: object
                    properties:
                      order_id:
                        type: integer
                        example: 1
                      customer_id:
                        type: integer
                        example: 1
                      order_status:
                        type: string
                        example: "completed"
                      order_timestamp:
                        type: string
                        example: "2024-11-10T12:00:00Z"
        400:
          description: Payment failed or insufficient stock
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Payment failed. Please try again."
        404:
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order not found"
